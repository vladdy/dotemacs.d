: Emacs Config

* Package system Initialization
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'package)
     (setq package-archives
           `(,@package-archives
             ("melpa" . "https://melpa.org/packages/")
             ;; ("marmalade" . "https://marmalade-repo.org/packages/")
             ("org" . "https://orgmode.org/elpa/")
             ;; ("user42" . "https://download.tuxfamily.org/user42/elpa/packages/")
             ;; ("emacswiki" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/emacswiki/")
             ;; ("sunrise" . "http://joseito.republika.pl/sunrise-commander/")
             ))
     (package-initialize)
   #+END_SRC
** [[https://github.com/jwiegley/use-package][Use-package]] installation and setup
   It can't install itself so we have to bootstrap it
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq package-enable-at-startup nil)

     ;; Bootstrap `use-package'
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))

     (put 'use-package 'lisp-indent-function 1)
     (setq use-package-always-ensure t)
   #+END_SRC

   Use-package has a lot of useful keywords
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package system-packages
       :custom
       (system-packages-noconfirm t))

     (use-package use-package-ensure-system-package)

     ;; :diminish keyword
     (use-package diminish)

     ;; :bind keyword
     (use-package bind-key)

     ;; :quelpa keyword
     (use-package quelpa)
     (use-package quelpa-use-package)

     ;;(use-package use-package-secrets
     ;;  :ensure nil
     ;;  :custom
     ;;  (use-package-secrets-default-directory "~/.emacs.d/secrets")
     ;;  :quelpa
     ;;  (use-package-secrets :repo "a13/use-package-secrets" :fetcher github :version original))

   #+END_SRC

* Org
  #+BEGIN_SRC emacs-lisp :tangle yes
	(use-package calendar
	  :ensure nil
	  :custom
	  (calendar-week-start-day 1))

	(use-package org
	  ;; to be sure we have latest Org version
	  :ensure org-plus-contrib
	  :custom
	  (org-src-tab-acts-natively t))

	(use-package org-bullets
	  :custom
	  ;; org-bullets-bullet-list
	  ;; default: "◉ ○ ✸ ✿"
	  ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
	  ;; Small: ► • ★ ▸
	  (org-bullets-bullet-list '("•"))
	  ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
	  ;; (org-ellipsis "⤵")
	  (org-ellipsis "…")
	  :hook
	  (org-mode . org-bullets-mode))

	;;(use-package htmlize
	;;  :custom
	;;  (org-html-htmlize-output-type 'css)
	;;  (org-html-htmlize-font-prefix "org-"))

	;;(use-package org-password-manager
	;;  :hook
	;;  (org-mode . org-password-manager-key-bindings))

	;;(use-package org-jira
	;;  :custom
	;;  (jiralib-url "http://jira:8080"))

	(global-set-key (kbd "C-c i") 
	(lambda() (interactive)(org-babel-load-file "~/.emacs.d/init.org")))
  #+END_SRC


* General
** Settings

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "M-o") 'other-window)
(windmove-default-keybindings)
#+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp :tangle yes
  (ido-mode t)
  (setq ido-enable-flex-matching t)
#+END_SRC


* Coding

** Python

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package anaconda-mode
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  )

  (use-package conda
    :ensure t
    :init
    (setq conda-anaconda-home (expand-file-name "~/anaconda3"))
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (conda-env-autoactivate-mode t)
  )
#+END_SRC

* Instuctions
** Regenerate and load config

Just run `C-c i`

** Upgrade packages

Within Emacs, list all packages `M-x list-packages`. It will refresh the repos.

Pres `U` to mark all upgradable packages to be upgrade. Then press `x` to perform
the upgrade.

* Other configs/examples to process
** https://github.com/angrybacon/dotemacs
** http://pages.sachachua.com/.emacs.d/Sacha.html
** http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php
** https://github.com/larstvei/dot-emacs
** https://jamiecollinson.com/blog/my-emacs-config/
