#+AUTHOR: Vlad Artamonov
#+TITLE: GNU Emacs Configuration


* About

* Start Up

** Better defaults

For a better user experience of GNU Emacs, here are the default values I use.

#+begin_src emacs-lisp :tangle yes
      (setq-default
       ad-redefinition-action 'accept                   ; Silence warnings for redefinition
       cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
       display-time-default-load-average nil            ; Don't display load average
       fill-column 80                                   ; Set width for automatic line breaks
       help-window-select t                             ; Focus new help windows when opened
       indent-tabs-mode nil                             ; Prefers spaces over tabs
       inhibit-startup-screen t                         ; Disable start-up screen
       initial-scratch-message ""                       ; Empty the initial *scratch* buffer
       kill-ring-max 128                                ; Maximum length of kill ring
       load-prefer-newer t                              ; Prefers the newest version of a file
       mark-ring-max 128                                ; Maximum length of mark ring
       scroll-conservatively most-positive-fixnum       ; Always scroll by one line
       select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
       tab-width 4                                      ; Set width for tabs
       use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
       user-full-name "Vlad Artamonov"                  ; Set the full name of the current user
       user-mail-address "perestrelka@gmail.com"        ; Set the email address of the current user
       vc-follow-symlinks t                             ; Always follow the symlinks
       view-read-only t)                                ; Always open read-only buffers in view-mode
      (cd "~/")                                         ; Move to the user directory
      (column-number-mode 1)                            ; Show the column number
      (display-time-mode 1)                             ; Enable time in the mode-line
      (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
      (global-hl-line-mode)                             ; Hightlight current line
      (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
      (show-paren-mode 1)                               ; Show the parent

      (when (file-directory-p "/run/current-system/sw/bin")
        (add-to-list 'exec-path "/run/current-system/sw/bin")
        (setenv "PATH" (concat (getenv "PATH") ":/run/current-system/sw/bin")))
#+end_src

** Fonts

Spending most of our time on GNU Emacs, it is important to use a font that will
make our reading easier.

Source Code Pro is one of the best monospaced font. Installed it with your
system manager.


#+begin_src emacs-lisp :tangle yes
  (set-face-attribute 'default nil :font "Source Code Pro")
  (set-fontset-font t 'latin "Noto Sans")
#+end_src


* Package system Initialization
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'package)
     (setq package-archives
           `(("gnu" . "http://elpa.gnu.org/packages/")
             ("melpa" . "https://melpa.org/packages/")
             ;; ("marmalade" . "https://marmalade-repo.org/packages/")
             ("org" . "https://orgmode.org/elpa/")
             ;; ("user42" . "https://download.tuxfamily.org/user42/elpa/packages/")
             ;; ("emacswiki" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/emacswiki/")
             ;; ("sunrise" . "http://joseito.republika.pl/sunrise-commander/")
             ))
     (package-initialize)
   #+END_SRC
** [[https://github.com/jwiegley/use-package][Use-package]] installation and setup
   It can't install itself so we have to bootstrap it
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq package-enable-at-startup nil)

     ;; Bootstrap `use-package'
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))

     (put 'use-package 'lisp-indent-function 1)
     (setq use-package-always-ensure t)
   #+END_SRC

   Use-package has a lot of useful keywords
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package system-packages
       :custom
       (system-packages-noconfirm t))

     (use-package use-package-ensure-system-package)

     ;; :diminish keyword
     (use-package diminish)

     ;; :bind keyword
     (use-package bind-key)

     ;; :quelpa keyword
     (use-package quelpa)
     (use-package quelpa-use-package)

     ;;(use-package use-package-secrets
     ;;  :ensure nil
     ;;  :custom
     ;;  (use-package-secrets-default-directory "~/.emacs.d/secrets")
     ;;  :quelpa
     ;;  (use-package-secrets :repo "a13/use-package-secrets" :fetcher github :version original))

   #+END_SRC


* More of Start Up

** Icons

To integrate icons with =doom-modeline=, =switch-to-buffer=, =counsel-find-file=
and many other functions; [[https://github.com/domtronn/all-the-icons.el/][all-the-icons]] is just the best package that you can
find.

*NOTE:* if it's the first time that you install the package, you must run
=M-x all-the-icons-install-fonts=.

#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons :defer 0.5)
#+end_src


** Theme

I'm a big fan of [[https://github.com/arcticicestudio/nord-emacs][nord-theme]] and combined with [[https://github.com/seagle0128/doom-modeline][doom-modeline]], it's just
happiness.

*NOTE:* to be able to see icons in the =doom-modeline=, you will need to install
[[#Icons][all-the-icons]].

#+begin_src emacs-lisp :tangle yes
  (use-package nord-theme
    :config
    (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
    (load-theme 'nord t))

  (use-package doom-modeline
    :defer 0.1
    :config (doom-modeline-mode))

  (use-package fancy-battery
    :after doom-modeline
    :hook (after-init . fancy-battery-mode))
#+end_src


** Turn off mouse interface

Since I never use the mouse with GNU Emacs, I prefer not to use certain
graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip that
I find invasive.

#+begin_src emacs-lisp :tangle yes
  (when window-system
    (menu-bar-mode -1)              ; Disable the menu bar
    (scroll-bar-mode -1)            ; Disable the scroll bar
    (tool-bar-mode -1)              ; Disable the tool bar
    (tooltip-mode -1)              ; Disable the tooltips
    (set-frame-size (selected-frame) 160 48))
#+end_src


* Languages
** Go

#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :mode "\\.go\\'"
  :bind (:map go-mode-map
         ("C-c C-n" . go-run)
         ("C-c ."   . go-test-current-test)
         ("C-c f"   . go-test-current-file))
  :config
  (add-hook 'before-save-hook #'gofmt-before-save)
  (use-package gotest)
  (use-package go-tag
    :config (setq go-tag-args (list "-transform" "camelcase"))))
#+end_src

** Markdown

Before you can use this package, make sure you install =pandoc= on your
operating system.

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :delight "Î¼ "
    :mode ("\\.markdown\\'" "\\.md\\'")
    :custom (markdown-command "/usr/local/bin/pandoc"))

  (use-package markdown-preview-mode
    :after markdown-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))
#+end_src

* Tools
** Syntax checking

#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src


** Version Control

It is quite common to work on Git repositories, so it is important to have a
configuration that we like.

#+BEGIN_QUOTE
[[https://github.com/magit/magit][Magit]] is an interface to the version control system Git, implemented as an Emacs
package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
claim that Magit wraps and improves upon each and every Git command, it is
complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine
Git clients exist, only Magit and Git itself deserve to be called porcelains.

[[https://github.com/tarsius][Jonas Bernoulli]]
#+END_QUOTE

#+begin_src emacs-lisp :tangle yes
  (use-package git-commit
    :after magit
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50)
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil)))

  (use-package magit :defer 0.3)

  (use-package smerge-mode
    :after hydra
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (hydra-merge/body)))))
#+end_src

In addition to that, I like to see the lines that are being modified in the file
while it is being edited.

#+begin_src emacs-lisp :tangle yes
  (use-package git-gutter
    :defer 0.3
    :delight
    :init (global-git-gutter-mode +1))
#+end_src

Finally, one last package that I like to use with Git to easily see the changes
made by previous commits.

#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine
    :defer 1
    :delight)
#+end_src

** Nix

#+begin_src emacs-lisp :tangle yes
  (use-package nix-mode
    :defer 1
    :mode ("\\.nix\\'" "\\.nix.in\\'"))

  (use-package nix-drv-mode
    :defer 1
    :ensure nix-mode
    :mode "\\.drv\\'")

  (use-package nix-shell
    :defer 1
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))

  (use-package nix-repl
    :defer 1
    :ensure nix-mode
    :commands (nix-repl))
#+end_src

** Terraform

#+begin_src emacs-lisp :tangle yes
  (use-package terraform-mode :defer 1)
#+end_src

* Org
  #+BEGIN_SRC emacs-lisp :tangle yes
	(use-package calendar
	  :ensure nil
	  :custom
	  (calendar-week-start-day 1))

	(use-package org
	  ;; to be sure we have latest Org version
	  :ensure org-plus-contrib
	  :custom
	  (org-src-tab-acts-natively t))

	(use-package org-bullets
	  :custom
	  ;; org-bullets-bullet-list
	  ;; default: "â â â¸ â¿"
	  ;; large: â¥ â â â â â¯ â â  â£ â¦ â¢ â â â â¶
	  ;; Small: âº â¢ â â¸
	  (org-bullets-bullet-list '("â¢"))
	  ;; others: â¼, â´, â¬, â¤·,â¦, and â±.
	  ;; (org-ellipsis "â¤µ")
	  (org-ellipsis "â¦")
	  :hook
	  (org-mode . org-bullets-mode))

	;;(use-package htmlize
	;;  :custom
	;;  (org-html-htmlize-output-type 'css)
	;;  (org-html-htmlize-font-prefix "org-"))

	;;(use-package org-password-manager
	;;  :hook
	;;  (org-mode . org-password-manager-key-bindings))

	;;(use-package org-jira
	;;  :custom
	;;  (jiralib-url "http://jira:8080"))

	(global-set-key (kbd "C-c i") 
	(lambda() (interactive)(org-babel-load-file "~/.emacs.d/config.org")))
  #+END_SRC


* General
** Settings

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "M-o") 'other-window)
(windmove-default-keybindings)
#+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp :tangle yes
  (ido-mode t)
  (setq ido-enable-flex-matching t)
#+END_SRC

** Direnv

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package direnv
   :config
   (direnv-mode))
#+END_SRC

* Coding

** Python

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package anaconda-mode
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  )

  (use-package conda
    :ensure t
    :init
    (setq conda-anaconda-home (expand-file-name "~/anaconda3"))
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (conda-env-autoactivate-mode t)
  )
#+END_SRC


** Ending Up
I'm using an =.org= file to maintain my GNU Emacs configuration. However, at his
launch, it will load the =config.el= source file for a faster loading.

The code below, executes =org-babel-tangle= asynchronously when
=config.org= is saved.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package async :ensure t)

  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/config-tangle ()
    "Tangles the org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/async-babel-tangle (org-file)
    "Tangles the org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))

#+END_SRC


* Instuctions
** Regenerate and load config

Just run `C-c i`

** Upgrade packages

Within Emacs, list all packages `M-x list-packages`. It will refresh the repos.

Pres `U` to mark all upgradable packages to be upgrade. Then press `x` to perform
the upgrade.

* Based on
** https://github.com/angrybacon/dotemacs
** http://pages.sachachua.com/.emacs.d/Sacha.html
** http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php
** https://github.com/larstvei/dot-emacs
** https://jamiecollinson.com/blog/my-emacs-config/
** https://github.com/rememberYou/.emacs.d/
